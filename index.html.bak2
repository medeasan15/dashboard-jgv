<!doctype html>
<html lang="id">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Dashboard Tesla 300x400 (match classes & audio IDs)</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@500;700&family=Orbitron:wght@700;800&display=swap" rel="stylesheet">
<style>
:root{
  --bg: transparent;
  --text: #e7f0ff;
  --muted:#9fb2c9;
  --accent:#3de0ff;
  --accent2:#7ef29a;
  --danger:#ff6b6b;

  --tesla-panel:#11161d;
  --tesla-panel2:#0e1319;
  --tesla-stroke:rgba(255,255,255,.1);
  --tesla-glass:rgba(255,255,255,.06);

  --fem-panel: #ffd6e7;      /* for compat if original CSS looks these up */
  --fem-grid:  #e6bcde;
  --fem-text-primary: #800080;
  --fem-text-secondary:#c71585;
}
*{box-sizing:border-box}
html,body{height:100%}
body{margin:0;background:transparent;color:var(--text);font-family:Inter,system-ui,Segoe UI,Roboto,Arial,sans-serif}

/* Root container (match original top-level class for compatibility) */
.dashboard-container{
  position:fixed; right:10px; bottom:35px;
  width:300px; height:400px;
  display:grid; grid-template-rows: 1fr auto; gap:8px;
  pointer-events:none; /* pass-through around cards */
}
/* Card look (Tesla) */
.card{
  pointer-events:auto;
  background:linear-gradient(180deg,var(--tesla-panel),var(--tesla-panel2));
  border:1px solid var(--tesla-stroke);
  border-radius:14px;
  box-shadow:0 12px 28px rgba(0,0,0,.45), inset 0 0 0 1px rgba(255,255,255,.03);
  overflow:hidden;
}
.card .inner{padding:10px; display:flex; flex-direction:column; gap:8px}

/* ===== SPEED CLUSTER ===== */
.speedometer-container.card .inner{gap:6px}
.speed-row{display:grid; grid-template-columns:auto 1fr auto; align-items:end; gap:8px}
#speed-value{
  font-family:Orbitron,Inter,sans-serif; font-size:40px; font-weight:800; line-height:1;
  background:linear-gradient(180deg,#d7f7ff,#9be7ff 55%,#75e2ff);
  -webkit-background-clip:text; background-clip:text; color:transparent;
  text-shadow:0 6px 18px rgba(61,224,255,.25)
}
#speed-unit{ font-size:10px; color:#9fb2c9; letter-spacing:.16em; text-transform:uppercase; font-weight:700 }

/* stats (gear/health/fuel) using original wrapper classes */
.gear-container-wrapper .gear-stat-bar,
.health-container-wrapper .health-stat-bar,
.fuel-gauge-container .fuel-gauge{
  background:var(--tesla-glass); border:1px solid var(--tesla-stroke);
  border-radius:10px; padding:6px;
}
/* gear */
.gear-stat-bar{display:flex; align-items:center; justify-content:space-between; gap:6px}
.gear-label span{font-size:10px;color:#9fb2c9;letter-spacing:.12em;text-transform:uppercase}
#gear-value{font-family:Orbitron; font-size:16px; font-weight:800}

/* health */
.health-stat-bar{display:flex; align-items:center; gap:6px}
.health-label span{font-size:10px;color:#9fb2c9;letter-spacing:.12em;text-transform:uppercase}
#health-value{font-family:Orbitron; font-size:16px; font-weight:800}
.health-bar-background{flex:1;height:6px; background:#0a1118; border:1px solid var(--tesla-stroke); border-radius:6px; overflow:hidden}
#health-bar{height:100%; width:100%; background:linear-gradient(90deg,var(--accent),var(--accent2))}

/* fuel */
.fuel-gauge-container .fuel-gauge{display:flex; align-items:center; justify-content:space-between; gap:6px}
.fuel-center{display:flex; align-items:center; gap:8px}
.fuel-label{ font-size:10px; color:#9fb2c9; letter-spacing:.12em; text-transform:uppercase }
.fuel-display{ font-family:Orbitron; font-size:16px; font-weight:800 }

/* RPM */
.rpm-gauge-container .rpm-gauge{display:flex; align-items:center; gap:8px}
#rpm-value{ font-family:Orbitron; font-size:16px; font-weight:800; color:#bfe9ff }
#rpm-bar-new{ height:8px; background:#0a1118; border:1px solid var(--tesla-stroke); border-radius:6px; overflow:hidden }
.rpm-bar-new .rpm-bar-fill, #rpm-bar-fill{ display:block; height:100%; width:0%; background:linear-gradient(90deg,#7ef29a,#ffe38b,#ff8a8a) }

/* indicators */
.horizontal-indicators-container{ display:flex; gap:6px; flex-wrap:wrap }
.icon{ width:24px;height:24px; display:flex; align-items:center; justify-content:center;
       border-radius:8px; border:1px solid var(--tesla-stroke); background:var(--tesla-glass);
       fill:#8aa1ba; stroke:#8aa1ba }
.icon.active{ fill:#ff63c3; stroke:#ff63c3 }

/* ===== MEDIA / YOUTUBE ===== */
.media-card.card .inner{ gap:6px }
.media-mini{ display:flex; gap:6px; align-items:center }
.media-mini input{ flex:1; min-width:0; font-size:11px; padding:6px 8px; color:#cfe4ff; background:#0b1118; border:1px solid var(--tesla-stroke); border-radius:8px; outline:none }
.btn{ border:1px solid var(--tesla-stroke); background:var(--tesla-glass); color:#d7ecff; padding:6px 10px; border-radius:8px; cursor:pointer; font-size:12px; font-weight:700 }
#yt-player{ width:100%; height:90px; border-radius:10px; overflow:hidden; background:#000 }
.media-ctrl{ display:grid; grid-template-columns:auto auto 1fr auto; gap:6px; align-items:center }
.vol{ display:flex; gap:6px; align-items:center }
.vol input[type=range]{ width:100%; height:4px; -webkit-appearance:none; background:#1a2330; border-radius:3px }
.vol input[type=range]::-webkit-slider-thumb{ -webkit-appearance:none; width:12px;height:12px;border-radius:50%; background:#3de0ff }
#yt-status{ font-size:11px; color:#9fb2c9; justify-self:end }

/* hide original loading spinner if present */
.dashboard-loading{ display:none!important }
</style>
</head>
<body>

<div class="dashboard-container">
  <!-- CLUSTER (Tesla-styled) -->
  <div class="speedometer-container card">
    <div class="inner">
      <div class="speed-row">
        <div class="unit">Speed</div>
        <div id="speed-value" class="speed-display">000</div>
        <div id="speed-unit" class="speed-unit">km/h</div>
      </div>

      <div class="horizontal-indicators-container">
        <svg id="left-indicator-icon" class="icon indicator-icon" viewBox="0 0 24 24"><path d="M14 7l-5 5 5 5V7z"/></svg>
        <svg id="engine-icon" class="icon" viewBox="0 0 24 24"><path d="M3 10h2v4H3v-4zm18 0h-2v4h2v-4zM7 7h10v10H7V7z"/></svg>
        <svg id="headlights-icon" class="icon" viewBox="0 0 24 24"><circle cx="8" cy="12" r="3"/><path d="M12 9h8M12 12h8M12 15h8"/></svg>
        <svg id="seatbelt-icon" class="icon" viewBox="0 0 24 24"><path d="M5 7l14 10M19 7L5 17"/></svg>
        <svg id="right-indicator-icon" class="icon indicator-icon" viewBox="0 0 24 24"><path d="M10 7l5 5-5 5V7z"/></svg>
      </div>

      <div class="rpm-gauge-container">
        <div class="rpm-gauge">
          <div id="rpm-value" class="rpm-display">0000</div>
          <div id="rpm-bar-new" class="rpm-bar-new"><span class="rpm-bar-fill" id="rpm-bar-fill" style="width:0%"></span></div>
        </div>
      </div>

      <div class="gear-container-wrapper">
        <div class="gear-stat-bar">
          <div class="gear-label"><span>GEAR</span></div>
          <div id="gear-value" class="gear-value">N</div>
        </div>
      </div>

      <div class="health-container-wrapper">
        <div class="health-stat-bar">
          <div class="health-label"><span>HEALTH</span></div>
          <div id="health-value" class="health-value">100%</div>
          <div class="health-bar-background">
            <div id="health-bar" class="health-bar-foreground"></div>
          </div>
        </div>
      </div>

      <div class="fuel-gauge-container">
        <div class="fuel-gauge">
          <div class="fuel-center">
            <div id="fuel-value" class="fuel-display">100</div>
            <div class="fuel-label">FUEL</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- MEDIA (YouTube below cluster) -->
  <div class="media-card card">
    <div class="inner">
      <div class="media-mini">
        <input id="yt-url" placeholder="Tempel URL YouTube…">
        <button class="btn" id="yt-load">Load</button>
      </div>
      <div id="yt-player"></div>
      <div class="media-ctrl">
        <button class="btn" id="yt-play">Play</button>
        <button class="btn" id="yt-pause">Pause</button>
        <div class="vol">
          <span style="font-size:11px;color:#9fb2c9">VOL</span>
          <input type="range" id="yt-volume" min="0" max="100" value="25">
        </div>
        <div id="yt-status">Idle · <span id="yt-time">0:00</span></div>
      </div>
    </div>
  </div>
</div>

<!-- Audio elements (IDs preserved from original) -->
<audio id="engine-start-sound" preload="none"><source src="engineon.mp3" type="audio/mpeg"></audio>
<audio id="engine-stop-sound" preload="none"><source src="engineoff.mp3" type="audio/mpeg"></audio>
<audio id="indicator-sound" preload="none"><source src="blinker.mp3" type="audio/mpeg"></audio>
<audio id="seatbelt-warning-sound" preload="none"><source src="kobo-jawa.mp3" type="audio/mpeg"></audio>
<audio id="alarm-sound" preload="none"><source src="alarm.mp3" type="audio/mpeg"></audio>
<audio id="radio-audio" preload="none"></audio>

<script src="scripts.js.download"></script>

<!-- ====== Inline JS from your original index.html (behavior preserved) ====== -->
<script>
(function(){
  // --- Robust YouTube IFrame API loader with status messages ---
  var apiRequested = false, apiReady = false, playerReady = false;
  var pendingVideoId = null;
  var player = null;

  function $(id){ return document.getElementById(id); }
  var statusEl = document.getElementById("yt-status") || document.getElementById("radioStatus") || document.getElementById("radio-status");
  var volEl = $("yt-volume");
  var urlEl = $("yt-url");
  var timeEl = $("yt-time");

  function setStatus(msg){
    if (statusEl) statusEl.textContent = msg;
  }

  function injectAPI(){
    if (apiRequested) return;
    apiRequested = true;
    setStatus("Loading YouTube API…");
    var s = document.createElement("script");
    s.src = "https://www.youtube.com/iframe_api";
    s.async = true;
    s.onerror = function(){ setStatus("Failed to load YouTube API (network/CSP)."); };
    document.head.appendChild(s);
  }

  // Called by YT API
  window.onYouTubeIframeAPIReady = function(){
    apiReady = true;
    setStatus("YouTube API Ready — paste URL and Load.");
    if (pendingVideoId) ensurePlayer(pendingVideoId);
  };

  // Fallback poll in case some environments don't trigger the callback
  var pollTimer = setInterval(function(){
    if (apiReady) { clearInterval(pollTimer); return; }
    if (window.YT && window.YT.Player) {
      apiReady = true;
      setStatus("YouTube API Ready — paste URL and Load.");
      if (pendingVideoId) ensurePlayer(pendingVideoId);
      clearInterval(pollTimer);
    }
  }, 400);

  function parseYouTubeId(url){
    if (!url) return null;
    var patterns = [
      /(?:v=|vi=)([A-Za-z0-9_-]{11})/,
      /youtu\.be\/([A-Za-z0-9_-]{11})/,
      /youtube\.com\/live\/([A-Za-z0-9_-]{11})/,
      /youtube\.com\/shorts\/([A-Za-z0-9_-]{11})/
    ];
    for (var i=0;i<patterns.length;i++){
      var m = url.match(patterns[i]);
      if (m && m[1]) return m[1];
    }
    var m2 = url.match(/([A-Za-z0-9_-]{11})/);
    return m2 ? m2[1] : null;
  }

  function ensurePlayer(videoId){
    if (!videoId){
      setStatus("Invalid URL — cannot find video ID.");
      return;
    }
    if (!apiReady){
      pendingVideoId = videoId;
      injectAPI();
      setStatus("Waiting for API… then loading video.");
      return;
    }
    if (player){
      try {
        player.loadVideoById(videoId);
        setStatus("Loaded: " + videoId);
      } catch(e){
        setStatus("Load error. Recreating player…");
        try { player.destroy(); } catch(_){}
        player = null;
        createPlayer(videoId);
      }
      return;
    }
    createPlayer(videoId);
  }

  function createPlayer(videoId){
    setStatus("Creating player…");
    player = new YT.Player('yt-player', {
      host: 'https://www.youtube.com',
      videoId: videoId,
      playerVars: {
        autoplay: 0,
        controls: 1,
        rel: 0,
        playsinline: 1,
        origin: window.location.origin,
        enablejsapi: 1
      },
      events: {
        onReady: function(){
          playerReady = true;
          try {
            var ifr = document.querySelector('#yt-player iframe');
            if (ifr) {
              ifr.setAttribute('allow','autoplay; encrypted-media; picture-in-picture; fullscreen');
              ifr.style.width='100%'; ifr.style.height='100%';
            }
          } catch(e){}
          try {
            var iv = parseInt((volEl && volEl.value) || "50", 10);
            if (isNaN(iv)) iv = 50;
            iv = Math.max(0, Math.min(100, iv));
            player.setVolume(iv);
            if (iv>0) try{player.unMute();}catch(e){}
          } catch(e){}
          setStatus("Ready — press Play.");
          if (window.__ytTicker) clearInterval(window.__ytTicker);
          window.__ytTicker = setInterval(function(){
            try {
              if (!player || !timeEl) return;
              var t = Math.floor(player.getCurrentTime() || 0);
              var mm = String(Math.floor(t/60));
              var ss = String(t%60).padStart(2,'0');
              timeEl.textContent = mm+':'+ss;
            } catch(e){}
          }, 500);
        },
        onStateChange: function(e){
          var map = { "-1":"Unstarted", "0":"Ended", "1":"Playing", "2":"Paused", "3":"Buffering", "5":"Cued" };
          setStatus(map[String(e.data)] || ("State: " + e.data));
        },
        onError: function(e){
          var code = String(e && e.data);
          var msg = "Error: " + code;
          if (code === '101' || code === '150') {
            msg += " — video tidak mengizinkan embed di luar YouTube.";
          } else if (code === '2') {
            msg += " — URL/ID tidak valid.";
          } else if (code === '5') {
            msg += " — masalah HTML5 player, coba refresh/browser lain.";
          }
          setStatus(msg);
        }
      }
    });
  }

  // Wire UI
  var loadBtn = document.getElementById("yt-load");
  var playBtn = document.getElementById("yt-play");
  var pauseBtn = document.getElementById("yt-pause");
  if (loadBtn) loadBtn.addEventListener("click", function(){
    var id = parseYouTubeId((urlEl && urlEl.value || "").trim());
    if (!apiRequested) injectAPI();
    ensurePlayer(id);
  });
  if (playBtn) playBtn.addEventListener("click", function(){ try { player && player.playVideo(); } catch(e){} });
  if (pauseBtn) pauseBtn.addEventListener("click", function(){ try { player && player.pauseVideo(); } catch(e){} });
  if (volEl) volEl.addEventListener("input", function(){
    try {
      if (!player) return;
      var v = parseInt(volEl.value, 10); if (isNaN(v)) v = 0;
      v = Math.max(0, Math.min(100, v));
      player.setVolume(v);
      if (v === 0) { try { player.mute(); } catch(e){} } else { try { player.unMute(); } catch(e){} }
    } catch(e){}
  });

  // Auto-init API so user doesn't have to click first
  injectAPI();
})();
</script>

<!-- ====== Robust YouTube loader (compact) ====== -->
<script>
(function(){
  var apiRequested=false, apiReady=false, player=null;
  function $$(id){return document.getElementById(id);};
  var statusEl=$$("#yt-status"), volEl=$$("#yt-volume"), urlEl=$$("#yt-url"), timeEl=$$("#yt-time");
  function setStatus(m){ if(statusEl) statusEl.textContent=m; }

  function injectAPI(){ if(apiRequested) return; apiRequested=true;
    var s=document.createElement("script"); s.src="https://www.youtube.com/iframe_api"; s.async=true;
    s.onerror=function(){ setStatus("Gagal memuat YouTube API."); }; document.head.appendChild(s);
  }
  window.onYouTubeIframeAPIReady=function(){ apiReady=true; setStatus("YouTube API Ready — tempel URL dan klik Load."); };
  var poll=setInterval(function(){ if(apiReady) return clearInterval(poll);
    if(window.YT&&window.YT.Player){ apiReady=true; setStatus("YouTube API Ready — tempel URL dan klik Load."); clearInterval(poll); }
  }, 400);

  function parseId(url){ if(!url) return null;
    var p=[/(?:v=|vi=)([A-Za-z0-9_-]{11})/,/youtu\.be\/([A-Za-z0-9_-]{11})/,/youtube\.com\/live\/([A-Za-z0-9_-]{11})/,/youtube\.com\/shorts\/([A-Za-z0-9_-]{11})/];
    for(var i=0;i<p.length;i++){ var m=url.match(p[i]); if(m&&m[1]) return m[1]; }
    var m2=url.match(/([A-Za-z0-9_-]{11})/); return m2?m2[1]:null;
  }

  function createPlayer(videoId){ setStatus("Membuat player…");
    player=new YT.Player('yt-player',{ host:'https://www.youtube.com', videoId:videoId,
      playerVars:{autoplay:0,controls:1,rel:0,playsinline:1,origin:window.location.origin,enablejsapi:1},
      events:{ onReady:function(){ try{ var ifr=document.querySelector('#yt-player iframe');
                if(ifr){ ifr.setAttribute('allow','autoplay; encrypted-media; picture-in-picture; fullscreen'); ifr.style.width='100%'; ifr.style.height='100%'; } }catch(e){}
              try{ var iv=parseInt((volEl&&volEl.value)||"50",10); if(isNaN(iv)) iv=50; iv=Math.max(0,Math.min(100,iv));
                    player.setVolume(iv); if(iv>0) try{player.unMute();}catch(e){} }catch(e){}
              setStatus("Siap — tekan Play.");
              if (window.__ytTicker) clearInterval(window.__ytTicker);
              window.__ytTicker=setInterval(function(){ try{ if(!player||!timeEl) return;
                var t=Math.floor(player.getCurrentTime()||0); var mm=String(Math.floor(t/60)), ss=String(t%60).padStart(2,'0');
                timeEl.textContent=mm+':'+ss; }catch(e){} }, 500);
            },
            onStateChange:function(e){ var map={"-1":"Unstarted","0":"Ended","1":"Playing","2":"Paused","3":"Buffering","5":"Cued"}; setStatus(map[String(e.data)]||("State: "+e.data)); },
            onError:function(e){ var c=String(e&&e.data), msg="Error: "+c;
              if(c==='101'||c==='150') msg+=' — video tidak mengizinkan embed.';
              else if(c==='2') msg+=' — URL/ID tidak valid.';
              else if(c==='5') msg+=' — masalah HTML5 player.';
              setStatus(msg);
            }
      }
    });
  }

  var loadBtn=$$("#yt-load"), playBtn=$$("#yt-play"), pauseBtn=$$("#yt-pause");
  if(loadBtn) loadBtn.addEventListener("click", function(){ var id=parseId((urlEl&&urlEl.value||"").trim());
    if(!apiRequested) injectAPI();
    if(!apiReady){ setStatus("Memuat API…"); var wait=setInterval(function(){ if(apiReady){ clearInterval(wait); createPlayer(id); } }, 300); }
    else{ if(!player) createPlayer(id); else{ try{ player.loadVideoById(id); setStatus("Loaded: "+id); }catch(e){ createPlayer(id); } } }
  });
  if(playBtn) playBtn.addEventListener("click", function(){ try{ player&&player.playVideo(); }catch(e){} });
  if(pauseBtn) playBtn && pauseBtn.addEventListener && pauseBtn.addEventListener("click", function(){ try{ player&&player.pauseVideo(); }catch(e){} });
  if(volEl) volEl.addEventListener("input", function(){ try{ if(!player) return;
    var v=parseInt(volEl.value,10); if(isNaN(v)) v=0; v=Math.max(0,Math.min(100,v));
    player.setVolume(v); if(v===0){try{player.mute();}catch(e){}} else {try{player.unMute();}catch(e){}}
  }catch(e){} });

  injectAPI();
})();
</script>

</body>
</html>
