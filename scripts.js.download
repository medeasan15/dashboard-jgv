/**
 * CYBERPUNK SPEEDOMETER v2.0 - GTA V MOD VERSION
 * Same functionality as original spedoku but with cyberpunk styling
 */

// Dashboard Loading Animation Controller
class DashboardLoadingController {
    constructor() {
        this.dashboardLoading = document.getElementById('dashboard-loading');
        this.isLoaded = false;
        this.init();
    }

    init() {
        // Start loading sequence when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                this.startLoadingSequence();
            });
        } else {
            this.startLoadingSequence();
        }
    }

    startLoadingSequence() {
        if (this.isLoaded) return;
        this.isLoaded = true;

        // Update loading text after 1 second
        setTimeout(() => {
            const loadingText = document.querySelector('.dashboard-loading-text');
            if (loadingText) {
                loadingText.textContent = 'SUCCESS';
            }
        }, 1000);

        // Hide dashboard loading indicator after animations complete
        setTimeout(() => {
            if (this.dashboardLoading) {
                this.dashboardLoading.style.display = 'none';
            }
        }, 2000);
    }
}

// Initialize dashboard loading controller
const dashboardLoadingController = new DashboardLoadingController();

// DOM Elements
const speedValueEl = document.getElementById('speed-value');
const speedUnitEl = document.getElementById('speed-unit');
const rpmValueEl = document.getElementById('rpm-value');
const rpmBarFillEl = document.getElementById('rpm-bar-fill');
const fuelValueEl = document.getElementById('fuel-value');
const healthBarEl = document.getElementById('health-bar');
const healthValueEl = document.getElementById('health-value');
const gearValueEl = document.getElementById('gear-value');
const leftIndicatorEl = document.getElementById('left-indicator-icon');
const rightIndicatorEl = document.getElementById('right-indicator-icon');
const headlightsIconEl = document.getElementById('headlights-icon');
const seatbeltIconEl = document.getElementById('seatbelt-icon');
const engineIconEl = document.getElementById('engine-icon');

// Sound Elements
const engineStartSound = document.getElementById('engine-start-sound');
const engineStopSound = document.getElementById('engine-stop-sound');
const indicatorSound = document.getElementById('indicator-sound');
const seatbeltWarningSound = document.getElementById('seatbelt-warning-sound');
// const alarmSound = document.getElementById('alarm-sound'); // Removed alarm sound element

// Radio Elements
const radioAudio = document.getElementById('radio-audio');
const stationSelector = document.getElementById('station-selector');
const volumeSlider = document.getElementById('volume-slider');
const stationNameEl = document.getElementById('station-name');
const radioStatusEl = document.getElementById('radio-status');

// Prevent any automatic playback (except alarm)
engineStartSound.pause();
engineStopSound.pause();
indicatorSound.pause();
seatbeltWarningSound.pause();
// alarmSound.pause(); // Initially paused, will be controlled by alarm system // Removed alarm sound pause

// Sound state tracking
let indicatorSoundInterval = null;
let seatbeltWarningInterval = null;
// let alarmActive = false; // Removed alarm state tracking
// let alarmStartTime = null; // Removed alarm start time tracking

// Configuration - same as original spedoku
let currentSpeedMode = 0;
const SPEED_MODES = ['km/h', 'mph', 'knots'];
const CONVERSION_FACTORS = [3.6, 2.23694, 1.94384];
const RPM_DANGER_THRESHOLD = 0.85;

// Track previous engine state
let previousEngineState = false;

/**
 * Updates the display of the engine state and plays appropriate sound.
 * @param {boolean} state - If true, the engine is on; otherwise, it is off.
 */
function setEngine(state) {
    // Only play sounds if the state actually changed
    if (state !== previousEngineState) {
        engineIconEl.classList.toggle('active', state);
        if (state) {
            engineStartSound.currentTime = 0;
            engineStartSound.play();
        } else {
            engineStopSound.currentTime = 0;
            engineStopSound.play();
        }
        previousEngineState = state;
    }
}

/**
 * Updates the speed display based on the current speed mode.
 * @param {number} speed - The speed value in meters per second (m/s).
 */
function setSpeed(speed) {
    const convertedSpeed = speed * CONVERSION_FACTORS[currentSpeedMode];
    const displaySpeed = Math.floor(convertedSpeed);
    // Format speed with leading zeros (3 digits) like Forza Horizon
    speedValueEl.textContent = displaySpeed.toString().padStart(3, '0');
}



/**
 * Updates the RPM gauge with digital display and horizontal bar.
 * @param {number} rpm - The RPM value (0 to 1).
 */
function setRPM(rpm) {
    if (!rpmValueEl) {
        console.error('RPM gauge elements not found!');
        return;
    }

    // Update digital display (convert to RPM value, assuming max 8000 RPM)
    const rpmValue = Math.round(rpm * 8000);
    // Format RPM with leading zeros (4 digits) like speedometer
    rpmValueEl.textContent = rpmValue.toString().padStart(4, '0');

    // Update horizontal RPM bar
    if (rpmBarFillEl) {
        // Set width for horizontal bar
        const rpmPercentage = Math.max(0, Math.min(100, rpm * 100));
        rpmBarFillEl.style.width = `${rpmPercentage}%`;

        // Remove previous state classes
        rpmBarFillEl.classList.remove('warning', 'danger');
        
        // Add class based on RPM level for CSS styling
        if (rpm >= RPM_DANGER_THRESHOLD) {
            rpmBarFillEl.classList.add('danger');
        } else if (rpm >= 0.6) {
            rpmBarFillEl.classList.add('warning');
        }
        // Default green style is defined in CSS, no class needed for normal state
    }

    console.log(`New RPM: ${rpm}, RPM value: ${rpmValue}, Bar width: ${rpm * 100}%`);
}

/**
 * Updates the fuel gauge with digital display.
 * @param {number} fuel - The fuel level (0 to 1).
 */
function setFuel(fuel) {
    if (!fuelValueEl) {
        console.error('Fuel gauge elements not found!');
        return;
    }

    // Update digital display
    const percentage = Math.max(0, Math.min(100, fuel * 100));
    fuelValueEl.textContent = Math.round(percentage);

    console.log(`New Fuel: ${fuel}, Percentage: ${percentage}%`);
}

/**
 * Updates the vehicle health display as a percentage.
 * @param {number} health - The vehicle health level (0 to 1).
 */
function setHealth(health) {
    const percentage = Math.max(0, Math.min(100, health * 100));
    healthBarEl.style.width = `${percentage}%`;
    healthValueEl.textContent = `${Math.round(percentage)}%`;
    
    // Remove previous state classes
    healthBarEl.classList.remove('warning', 'danger');
    
    // Add class based on health level for CSS styling
    if (percentage <= 25) {
        healthBarEl.classList.add('danger');
    } else if (percentage <= 50) {
        healthBarEl.classList.add('warning');
    }
    // Default green style is defined in CSS, no class needed for normal state
}

/**
 * Updates the current gear display.
 * @param {string|number} gear - The current gear to display (0 represents neutral/reverse).
 */
function setGear(gear) {
    if (gear === 0) {
        gearValueEl.textContent = 'N';
    } else if (typeof gear === 'string') {
        gearValueEl.textContent = gear.toUpperCase();
    } else {
        gearValueEl.textContent = gear;
    }
}

/**
 * Updates the headlights status display.
 * @param {number} state - The headlight state (0: Off, 1: On, 2: High Beam).
 */
function setHeadlights(state) {
    headlightsIconEl.classList.remove('low-beam', 'high-beam');
    switch (state) {
        case 1:
            headlightsIconEl.classList.add('low-beam');
            break;
        case 2:
            headlightsIconEl.classList.add('high-beam');
            break;
    }
}

/**
 * Sets the state of the left turn indicator and updates the display.
 * @param {boolean} state - If true, turns the left indicator on; otherwise, turns it off.
 */
function setLeftIndicator(state) {
    leftIndicatorEl.classList.toggle('active', state);
    handleIndicatorSound(state || rightIndicatorEl.classList.contains('active'));
}

/**
 * Sets the state of the right turn indicator and updates the display.
 * @param {boolean} state - If true, turns the right indicator on; otherwise, turns it off.
 */
function setRightIndicator(state) {
    rightIndicatorEl.classList.toggle('active', state);
    handleIndicatorSound(state || leftIndicatorEl.classList.contains('active'));
}

/**
 * Manages the indicator sound based on indicator state
 * @param {boolean} active - If true, starts the indicator sound; otherwise, stops it.
 */
function handleIndicatorSound(active) {
    if (active && !indicatorSoundInterval) {
        // Start the repeating sound if indicators are active
        indicatorSoundInterval = setInterval(() => {
            if (leftIndicatorEl.classList.contains('active') || rightIndicatorEl.classList.contains('active')) {
                indicatorSound.currentTime = 0;
                indicatorSound.play().catch(() => {
                    // Handle any playback errors silently
                });
            } else {
                // Stop if neither indicator is active
                clearInterval(indicatorSoundInterval);
                indicatorSoundInterval = null;
            }
        }, 600); // Sync with blink animation
    } else if (!active) {
        // Stop the repeating sound
        if (indicatorSoundInterval) {
            clearInterval(indicatorSoundInterval);
            indicatorSoundInterval = null;
        }
        indicatorSound.pause();
        indicatorSound.currentTime = 0;
    }
}

/**
 * Updates the seatbelt status display and manages warning sound.
 * @param {boolean} state - If true, indicates seatbelts are fastened; otherwise, indicates they are not.
 */
function setSeatbelts(state) {
    seatbeltIconEl.classList.toggle('active', !state);
    
    // Handle warning sound
    if (!state && !seatbeltWarningInterval) {
        // Start repeating warning sound if seatbelt is not fastened
        seatbeltWarningInterval = setInterval(() => {
            seatbeltWarningSound.currentTime = 0;
            seatbeltWarningSound.play().catch(() => {
                // Handle any playback errors silently
            });
        }, 2000); // Play every 2 seconds
    } else if (state) {
        // Stop warning sound if seatbelt is fastened
        if (seatbeltWarningInterval) {
            clearInterval(seatbeltWarningInterval);
            seatbeltWarningInterval = null;
        }
        seatbeltWarningSound.pause();
        seatbeltWarningSound.currentTime = 0;
    }
}

/** 
 * Sets the speed display mode and updates the speed unit display.
 * @param {number} mode - The speed mode to set (0: KMH, 1: MPH, 2: Knots).
 */
function setSpeedMode(mode) {
    if (mode >= 0 && mode < SPEED_MODES.length) {
        currentSpeedMode = mode;
        speedUnitEl.textContent = SPEED_MODES[currentSpeedMode];
        updateSpeedNumbers();
    }
}

/**
 * Updates the speed numbers around the speedometer based on current mode.
 */
function updateSpeedNumbers() {
    const speedNumbers = document.querySelectorAll('.speed-number');
    const numberSets = {
        0: [0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200], // km/h
        1: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 120],      // mph
        2: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]       // knots
    };

    const numbers = numberSets[currentSpeedMode] || numberSets[0];

    speedNumbers.forEach((numberEl, index) => {
        if (index < numbers.length) {
            numberEl.textContent = numbers[index];
        }
    });
}

// Dashboard ready - initialize analog speedometer
console.log('Military-Style Speedometer - Dashboard Ready');

// Initialize speed numbers on load
document.addEventListener('DOMContentLoaded', () => {
    updateSpeedNumbers();
    // initializeAlarmSystem(); // Removed alarm system initialization
    // Initialize alarm indicator as inactive // Removed alarm indicator initialization
    // Initialize speed display with proper 3-digit format
    setSpeed(0);
    // Initialize RPM display with proper 4-digit format
    setRPM(0);
});

// Initialize dashboard on page load
window.addEventListener('load', () => {
    dashboardLoadingController.startLoading();

    // Test the new gauges after loading
    setTimeout(() => {
        console.log('Testing new gauges...');
        setRPM(0.5); // 50% RPM
        setFuel(0.75); // 75% fuel
    }, 2000);
});

// Custom Internet Radio Functionality
class InternetRadio {
    constructor() {
        this.audioElement = document.getElementById('radio-audio');
        this.volumeSlider = document.getElementById('volume-slider');
        this.stationName = document.getElementById('station-name');
        this.radioStatus = document.getElementById('radio-status');
        this.prevButton = document.getElementById('prev-station');
        this.nextButton = document.getElementById('next-station');
        this.playPauseButton = document.getElementById('play-pause');

        // Define stations array
        this.stations = [
            { url: "https://n07.radiojar.com/rrqf78p3bnzuv?rj-tok=AAABhY8Nl3sA002K4e2rm7K23A&rj-ttl=5", name: "Radio Jakarta" },
            { url: "https://stream.radiojar.com/rrqf78p3bnzuv", name: "Radio Trax" },
            { url: "https://streaming.radiomuslim.com/radiomuslim.mp3", name: "Radio Muslim" },
            { url: "https://live.radioistara.com/listen/radioistara/radioistara", name: "Radio Istara" },
            { url: "https://live.brayaradio.com/listen/brayaradio/stream", name: "Braya Radio" },
            { url: "https://sundaradio.com/live/sundaradio", name: "Sunda Radio" },
            { url: "https://live.harleyradioshow.com/listen/harleyradio/harleyradio", name: "Harley Radio" },
            { url: "https://s2.cloudmu.id/listen/prambors/stream", name: "Prambors Radio" },
            { url: "https://stream-156.zeno.fm/z1bs88ttrfhvv", name: "Radio Trenggalek" },
            { url: "https://static-s8.xajist.com:8787/live", name: "Radio Wijang Songko" },
            { url: "https://live.suarasalira.com/listen/suarasalira/stream", name: "Radio Suara Salira" }
        ];
        
        this.currentStationIndex = -1; // -1 means no station selected
        this.isPlaying = false;
        
        this.init();
    }

    init() {
        // Set initial volume
        this.setVolume(this.volumeSlider.value);
        
        // Event listeners for new buttons
        this.prevButton.addEventListener('click', () => {
            this.previousStation();
        });
        
        this.nextButton.addEventListener('click', () => {
            this.nextStation();
        });
        
        this.playPauseButton.addEventListener('click', () => {
            this.togglePlayPause();
        });
        
        this.volumeSlider.addEventListener('input', (e) => {
            this.setVolume(e.target.value);
        });
        
        // Handle audio events
        this.audioElement.addEventListener('playing', () => {
            this.radioStatus.textContent = 'PLAYING';
            this.isPlaying = true;
            this.updatePlayPauseButton();
        });
        
        this.audioElement.addEventListener('pause', () => {
            this.radioStatus.textContent = 'PAUSED';
            this.isPlaying = false;
            this.updatePlayPauseButton();
        });
        
        this.audioElement.addEventListener('ended', () => {
            this.radioStatus.textContent = 'STOPPED';
            this.isPlaying = false;
            this.updatePlayPauseButton();
        });
        
        this.audioElement.addEventListener('error', (e) => {
            console.error('Radio error:', e);
            this.radioStatus.textContent = 'ERROR';
            this.stationName.textContent = 'STATION ERROR';
            this.isPlaying = false;
            this.updatePlayPauseButton();
        });
        
        this.audioElement.addEventListener('loadstart', () => {
            this.radioStatus.textContent = 'LOADING...';
        });
        
        this.audioElement.addEventListener('canplay', () => {
            this.radioStatus.textContent = 'READY';
        });
        
        // Set initial status
        this.radioStatus.textContent = 'READY ((PRESS F2 TO INTERACT))';
        this.stationName.textContent = 'SELECT STATION';
        this.updatePlayPauseButton();
    }

    updatePlayPauseButton() {
        if (this.isPlaying) {
            this.playPauseButton.textContent = '❚❚'; // Pause symbol
        } else {
            this.playPauseButton.textContent = '▶'; // Play symbol
        }
    }

    playStation(index) {
        if (index < 0 || index >= this.stations.length) {
            this.stop();
            this.stationName.textContent = 'SELECT STATION';
            this.currentStationIndex = -1;
            return;
        }
        
        this.currentStationIndex = index;
        const station = this.stations[index];
        this.stationName.textContent = station.name;
        
        // Set the new source
        this.audioElement.src = station.url;
        
        // Play the audio
        this.audioElement.play()
            .then(() => {
                console.log('Radio playing');
            })
            .catch((error) => {
                console.error('Error playing radio:', error);
                this.radioStatus.textContent = 'PLAY ERROR';
                this.stationName.textContent = 'PLAY ERROR';
            });
    }

    nextStation() {
        if (this.stations.length === 0) return;
        
        let nextIndex = this.currentStationIndex + 1;
        if (nextIndex >= this.stations.length) {
            nextIndex = 0; // Loop back to first station
        }
        
        this.playStation(nextIndex);
    }

    previousStation() {
        if (this.stations.length === 0) return;
        
        let prevIndex = this.currentStationIndex - 1;
        if (prevIndex < 0) {
            prevIndex = this.stations.length - 1; // Loop to last station
        }
        
        this.playStation(prevIndex);
    }

    togglePlayPause() {
        if (this.currentStationIndex === -1) {
            // If no station selected, start with the first one
            this.playStation(0);
        } else {
            if (this.isPlaying) {
                this.audioElement.pause();
            } else {
                // If we have a station but it's paused, resume playing
                this.audioElement.play()
                    .then(() => {
                        console.log('Radio playing');
                    })
                    .catch((error) => {
                        console.error('Error playing radio:', error);
                        this.radioStatus.textContent = 'PLAY ERROR';
                        this.stationName.textContent = 'PLAY ERROR';
                    });
            }
        }
    }

    stop() {
        this.audioElement.pause();
        this.audioElement.src = '';
        this.radioStatus.textContent = 'STOPPED';
        this.isPlaying = false;
        this.updatePlayPauseButton();
    }
    
    // Reset radio to initial state
    reset() {
        this.audioElement.pause();
        this.audioElement.src = '';
        this.radioStatus.textContent = 'READY';
        this.stationName.textContent = 'SELECT STATION';
        this.currentStationIndex = -1;
        this.isPlaying = false;
        this.updatePlayPauseButton();
    }

    setVolume(value) {
        const volume = value / 100;
        this.audioElement.volume = volume;
        // Store volume in localStorage for persistence
        localStorage.setItem('radioVolume', volume);
    }
    
    // Load volume from localStorage if available
    loadVolume() {
        const savedVolume = localStorage.getItem('radioVolume');
        if (savedVolume !== null) {
            const volume = parseFloat(savedVolume);
            this.volumeSlider.value = volume * 100;
            this.audioElement.volume = volume;
        }
    }
}

// Initialize radio when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    const radio = new InternetRadio();
    // Load saved volume
    radio.loadVolume();
});
